<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>0</Major>
          <Minor>9</Minor>
          <Revision>76</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">9d490287-c392-4f3f-837e-b779cbbafb5e</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">636385872032967897</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">LispHopper.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>43</X>
                  <Y>159</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">1</item>
          </items>
          <chunks count="1">
            <chunk name="Library" index="0">
              <items count="4">
                <item name="Author" type_name="gh_string" type_code="10">Robert McNeel and Associates</item>
                <item name="Id" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Python Interpreter</item>
                <item name="Version" type_name="gh_string" type_code="10">0.6.0.3</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">6</item>
          </items>
          <chunks count="6">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8ff8ef40-ed49-4559-92fa-803da67b0969</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">(circle (point 0 0 0) 50)</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>47</X>
                          <Y>272</Y>
                          <W>310</W>
                          <H>204</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>47.47498</X>
                          <Y>272.9382</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="3">
                <item name="GUID" type_name="gh_guid" type_code="9">410755b1-224a-4c1e-a407-bf32fb45ea7e</item>
                <item name="Lib" type_name="gh_guid" type_code="9">16cf80bc-9018-cbdb-2238-976eb17fd30d</item>
                <item name="Name" type_name="gh_string" type_code="10">Python Script</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="CodeInput" type_name="gh_string" type_code="10">################ Scheme Interpreter in Python

## (c) Peter Norvig, 2010; See http://norvig.com/lispy2.html

################ Symbol, Procedure, classes

from __future__ import division
import re, sys, StringIO

#import rhinoscriptsyntax as rs

class Symbol(str): pass

def Sym(s, symbol_table={}):
    "Find or create unique Symbol entry for str s in symbol table."
    if s not in symbol_table: symbol_table[s] = Symbol(s)
    return symbol_table[s]

_quote, _if, _set, _define, _lambda, _begin, _definemacro, = map(Sym, 
"quote   if   set!  define   lambda   begin   define-macro".split())

_quasiquote, _unquote, _unquotesplicing = map(Sym,
"quasiquote   unquote   unquote-splicing".split())

class Procedure(object):
    "A user-defined Scheme procedure."
    def __init__(self, parms, exp, env):
        self.parms, self.exp, self.env = parms, exp, env
    def __call__(self, *args): 
        return eval(self.exp, Env(self.parms, args, self.env))

################ parse, read, and user interaction

def parse(inport):
    "Parse a program: read and expand/error-check it."
    # Backwards compatibility: given a str, convert it to an InPort
    if isinstance(inport, str): inport = InPort(StringIO.StringIO(inport))
    return expand(read(inport), toplevel=True)

eof_object = Symbol('#&lt;eof-object&gt;') # Note: uninterned; can't be read

class InPort(object):
    "An input port. Retains a line of chars."
    tokenizer = r"""\s*(,@|[('`,)]|"(?:[\\].|[^\\"])*"|;.*|[^\s('"`,;)]*)(.*)"""
    def __init__(self, file):
        self.file = file; self.line = ''
    def next_token(self):
        "Return the next token, reading new text into line buffer if needed."
        while True:
            if self.line == '': self.line = self.file.readline()
            if self.line == '': return eof_object
            token, self.line = re.match(InPort.tokenizer, self.line).groups()
            if token != '' and not token.startswith(';'):
                return token

def readchar(inport):
    "Read the next character from an input port."
    if inport.line != '':
        ch, inport.line = inport.line[0], inport.line[1:]
        return ch
    else:
        return inport.file.read(1) or eof_object

def read(inport):
    "Read a Scheme expression from an input port."
    def read_ahead(token):
        if '(' == token: 
            L = []
            while True:
                token = inport.next_token()
                if token == ')': return L
                else: L.append(read_ahead(token))
        elif ')' == token: raise SyntaxError('unexpected )')
        elif token in quotes: return [quotes[token], read(inport)]
        elif token is eof_object: raise SyntaxError('unexpected EOF in list')
        else: return atom(token)
    # body of read:
    token1 = inport.next_token()
    return eof_object if token1 is eof_object else read_ahead(token1)

quotes = {"'":_quote, "`":_quasiquote, ",":_unquote, ",@":_unquotesplicing}

def atom(token):
    'Numbers become numbers; #t and #f are booleans; "..." string; otherwise Symbol.'
    if token == '#t': return True
    elif token == '#f': return False
    elif token[0] == '"': return token[1:-1].decode('string_escape')
    try: return int(token)
    except ValueError:
        try: return float(token)
        except ValueError:
            try: return complex(token.replace('i', 'j', 1))
            except ValueError:
                return Sym(token)

def to_string(x):
    "Convert a Python object back into a Lisp-readable string."
    if x is True: return "#t"
    elif x is False: return "#f"
    elif isa(x, Symbol): return x
    elif isa(x, str): return '"%s"' % x.encode('string_escape').replace('"',r'\"')
    elif isa(x, list): return '('+' '.join(map(to_string, x))+')'
    elif isa(x, complex): return str(x).replace('j', 'i')
    else: return str(x)

def load(filename):
    "Eval every expression from a file."
    repl(None, InPort(open(filename)), None)

def repl(prompt='lispy&gt; ', inport=InPort(sys.stdin), out=sys.stdout):
    "A prompt-read-eval-print loop."
    sys.stderr.write("Lispy version 2.0\n")
    while True:
        try:
            if prompt: sys.stderr.write(prompt)
            x = parse(inport)
            print x
            if x is eof_object: return
            val = eval(x)
            if val is not None and out: print &gt;&gt; out, to_string(val)
        except Exception as e:
            print '%s: %s' % (type(e).__name__, e)

def parse_eval(inport):
    try:
        x = parse(inport)
        if x is eof_object:return
        val = eval(x)
        if val is not None:
            return val
    except Exception as e:
        print '%s: %s' % (type(e).__name__, e)


################ Environment class

class Env(dict):
    "An environment: a dict of {'var':val} pairs, with an outer Env."
    def __init__(self, parms=(), args=(), outer=None):
        # Bind parm list to corresponding args, or single parm to list of args
        self.outer = outer
        if isa(parms, Symbol): 
            self.update({parms:list(args)})
        else: 
            if len(args) != len(parms):
                raise TypeError('expected %s, given %s, ' 
                                % (to_string(parms), to_string(args)))
            self.update(zip(parms,args))
    def find(self, var):
        "Find the innermost Env where var appears."
        if var in self: return self
        elif self.outer is None: raise LookupError(var)
        else: return self.outer.find(var)

def is_pair(x): return x != [] and isa(x, list)
def cons(x, y): return [x]+y

def callcc(proc):
    "Call proc with current continuation; escape only"
    ball = RuntimeWarning("Sorry, can't continue this continuation any longer.")
    def throw(retval): ball.retval = retval; raise ball
    try:
        return proc(throw)
    except RuntimeWarning as w:
        if w is ball: return ball.retval
        else: raise w

def add_globals(self):
    "Add some Scheme standard procedures."
    import math, cmath, operator as op
    self.update(vars(math))
    self.update(vars(cmath))
    self.update({
     '+':op.add, '-':op.sub, '*':op.mul, '/':op.div, 'not':op.not_, 
     '&gt;':op.gt, '&lt;':op.lt, '&gt;=':op.ge, '&lt;=':op.le, '=':op.eq, 
     'equal?':op.eq, 'eq?':op.is_, 'length':len, 'cons':cons,
     'car':lambda x:x[0], 'cdr':lambda x:x[1:], 'append':op.add,  
     'list':lambda *x:list(x), 'list?': lambda x:isa(x,list),
     'null?':lambda x:x==[], 'symbol?':lambda x: isa(x, Symbol),
     'boolean?':lambda x: isa(x, bool), 'pair?':is_pair, 
     'port?': lambda x:isa(x,file), 'apply':lambda proc,l: proc(*l), 
     'eval':lambda x: eval(expand(x)), 'load':lambda fn: load(fn), 'call/cc':callcc,
     'open-input-file':open,'close-input-port':lambda p: p.file.close(), 
     'open-output-file':lambda f:open(f,'w'), 'close-output-port':lambda p: p.close(),
     'eof-object?':lambda x:x is eof_object, 'read-char':readchar,
     'read':read, 'write':lambda x,port=sys.stdout:port.write(to_string(x)),
     'display':lambda x,port=sys.stdout:port.write(x if isa(x,str) else to_string(x))})
    return self

isa = isinstance

global_env = add_globals(Env())


    
################ eval (tail recursive)

def eval(x, env=global_env):
    "Evaluate an expression in an environment."
    while True:
        if isa(x, Symbol):       # variable reference
            return env.find(x)[x]
        elif not isa(x, list):   # constant literal
            return x                
        elif x[0] is _quote:     # (quote exp)
            (_, exp) = x
            return exp
        elif x[0] is _if:        # (if test conseq alt)
            (_, test, conseq, alt) = x
            x = (conseq if eval(test, env) else alt)
        elif x[0] is _set:       # (set! var exp)
            (_, var, exp) = x
            env.find(var)[var] = eval(exp, env)
            return None
        elif x[0] is _define:    # (define var exp)
            (_, var, exp) = x
            env[var] = eval(exp, env)
            return None
        elif x[0] is _lambda:    # (lambda (var*) exp)
            (_, vars, exp) = x
            return Procedure(vars, exp, env)
        elif x[0] is _begin:     # (begin exp+)
            for exp in x[1:-1]:
                eval(exp, env)
            x = x[-1]
        else:                    # (proc exp*)
            exps = [eval(exp, env) for exp in x]
            proc = exps.pop(0)
            if isa(proc, Procedure):
                x = proc.exp
                env = Env(proc.parms, exps, proc.env)
            else:
                return proc(*exps)

################ expand

def expand(x, toplevel=False):
    "Walk tree of x, making optimizations/fixes, and signaling SyntaxError."
    require(x, x!=[])                    # () =&gt; Error
    if not isa(x, list):                 # constant =&gt; unchanged
        return x
    elif x[0] is _quote:                 # (quote exp)
        require(x, len(x)==2)
        return x
    elif x[0] is _if:                    
        if len(x)==3: x = x + [None]     # (if t c) =&gt; (if t c None)
        require(x, len(x)==4)
        return map(expand, x)
    elif x[0] is _set:                   
        require(x, len(x)==3); 
        var = x[1]                       # (set! non-var exp) =&gt; Error
        require(x, isa(var, Symbol), "can set! only a symbol")
        return [_set, var, expand(x[2])]
    elif x[0] is _define or x[0] is _definemacro: 
        require(x, len(x)&gt;=3)            
        _def, v, body = x[0], x[1], x[2:]
        if isa(v, list) and v:           # (define (f args) body)
            f, args = v[0], v[1:]        #  =&gt; (define f (lambda (args) body))
            return expand([_def, f, [_lambda, args]+body])
        else:
            require(x, len(x)==3)        # (define non-var/list exp) =&gt; Error
            require(x, isa(v, Symbol), "can define only a symbol")
            exp = expand(x[2])
            if _def is _definemacro:     
                require(x, toplevel, "define-macro only allowed at top level")
                proc = eval(exp)       
                require(x, callable(proc), "macro must be a procedure")
                macro_table[v] = proc    # (define-macro v proc)
                return None              #  =&gt; None; add v:proc to macro_table
            return [_define, v, exp]
    elif x[0] is _begin:
        if len(x)==1: return None        # (begin) =&gt; None
        else: return [expand(xi, toplevel) for xi in x]
    elif x[0] is _lambda:                # (lambda (x) e1 e2) 
        require(x, len(x)&gt;=3)            #  =&gt; (lambda (x) (begin e1 e2))
        vars, body = x[1], x[2:]
        require(x, (isa(vars, list) and all(isa(v, Symbol) for v in vars))
                or isa(vars, Symbol), "illegal lambda argument list")
        exp = body[0] if len(body) == 1 else [_begin] + body
        return [_lambda, vars, expand(exp)]   
    elif x[0] is _quasiquote:            # `x =&gt; expand_quasiquote(x)
        require(x, len(x)==2)
        return expand_quasiquote(x[1])
    elif isa(x[0], Symbol) and x[0] in macro_table:
        return expand(macro_table[x[0]](*x[1:]), toplevel) # (m arg...) 
    else:                                #        =&gt; macroexpand if m isa macro
        return map(expand, x)            # (f arg...) =&gt; expand each

def require(x, predicate, msg="wrong length"):
    "Signal a syntax error if predicate is false."
    if not predicate: raise SyntaxError(to_string(x)+': '+msg)

_append, _cons, _let = map(Sym, "append cons let".split())

def expand_quasiquote(x):
    """Expand `x =&gt; 'x; `,x =&gt; x; `(,@x y) =&gt; (append x y) """
    if not is_pair(x):
        return [_quote, x]
    require(x, x[0] is not _unquotesplicing, "can't splice here")
    if x[0] is _unquote:
        require(x, len(x)==2)
        return x[1]
    elif is_pair(x[0]) and x[0][0] is _unquotesplicing:
        require(x[0], len(x[0])==2)
        return [_append, x[0][1], expand_quasiquote(x[1:])]
    else:
        return [_cons, expand_quasiquote(x[0]), expand_quasiquote(x[1:])]

def let(*args):
    args = list(args)
    x = cons(_let, args)
    require(x, len(args)&gt;1)
    bindings, body = args[0], args[1:]
    require(x, all(isa(b, list) and len(b)==2 and isa(b[0], Symbol)
                   for b in bindings), "illegal binding list")
    vars, vals = zip(*bindings)
    return [[_lambda, list(vars)]+map(expand, body)] + map(expand, vals)

macro_table = {_let:let} ## More macros can go here

eval(parse("""(begin

(define-macro and (lambda args 
   (if (null? args) #t
       (if (= (length args) 1) (car args)
           `(if ,(car args) (and ,@(cdr args)) #f)))))

;; More macros can also go here

)"""))

# if __name__ == '__main__':
    # repl()

if __name__ == '__main__':
    
    
    ###### LIBS HERE
    import rhinoscriptsyntax as rs
    global_env.update(vars(rs))
    #####
    
    result = parse_eval(expr)

</item>
                    <item name="Description" type_name="gh_string" type_code="10">A python scriptable component</item>
                    <item name="EditorLocation" type_name="gh_drawing_point" type_code="30">
                      <X>26</X>
                      <Y>26</Y>
                    </item>
                    <item name="EditorSize" type_name="gh_drawing_size" type_code="32">
                      <W>843</W>
                      <H>825</H>
                    </item>
                    <item name="HideInput" type_name="gh_bool" type_code="1">true</item>
                    <item name="HideOutput" type_name="gh_bool" type_code="1">false</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">f8ce7829-ede5-42c8-b7f9-b9d8f285d976</item>
                    <item name="Name" type_name="gh_string" type_code="10">Python Script</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Python</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>211</X>
                          <Y>89</Y>
                          <W>99</W>
                          <H>44</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>256</X>
                          <Y>111</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="ParameterData">
                      <items count="5">
                        <item name="InputCount" type_name="gh_int32" type_code="3">1</item>
                        <item name="InputId" index="0" type_name="gh_guid" type_code="9">84fa917c-1ed8-4db3-8be1-7bdc4a6495a2</item>
                        <item name="OutputCount" type_name="gh_int32" type_code="3">2</item>
                        <item name="OutputId" index="0" type_name="gh_guid" type_code="9">3ede854e-c753-40eb-84cb-b48008f14fd4</item>
                        <item name="OutputId" index="1" type_name="gh_guid" type_code="9">8ec86459-bf01-4409-baee-174d0d2b13d0</item>
                      </items>
                      <chunks count="3">
                        <chunk name="InputParam" index="0">
                          <items count="11">
                            <item name="AllowTreeAccess" type_name="gh_bool" type_code="1">true</item>
                            <item name="Description" type_name="gh_string" type_code="10">Script variable Python</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">64e07377-e31a-4263-b2c3-3b4ac3c66799</item>
                            <item name="Name" type_name="gh_string" type_code="10">expr</item>
                            <item name="NickName" type_name="gh_string" type_code="10">expr</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                            <item name="ScriptParamAccess" type_name="gh_int32" type_code="3">0</item>
                            <item name="ShowTypeHints" type_name="gh_bool" type_code="1">true</item>
                            <item name="Source" index="0" type_name="gh_guid" type_code="9">11a2162d-dffe-4891-8396-cb1350d6b83b</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                            <item name="TypeHintID" type_name="gh_guid" type_code="9">87f87f55-5b71-41f4-8aea-21d494016f81</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>213</X>
                                  <Y>91</Y>
                                  <W>28</W>
                                  <H>40</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>228.5</X>
                                  <Y>111</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="0">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">The execution information, as output and error streams</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">c3e73ae1-2032-4a81-8991-cabd8a492589</item>
                            <item name="Name" type_name="gh_string" type_code="10">out</item>
                            <item name="NickName" type_name="gh_string" type_code="10">out</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>271</X>
                                  <Y>91</Y>
                                  <W>37</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>289.5</X>
                                  <Y>101</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                        <chunk name="OutputParam" index="1">
                          <items count="6">
                            <item name="Description" type_name="gh_string" type_code="10">Script output result.</item>
                            <item name="InstanceGuid" type_name="gh_guid" type_code="9">f48286ee-ef18-4310-b637-412b074a4688</item>
                            <item name="Name" type_name="gh_string" type_code="10">result</item>
                            <item name="NickName" type_name="gh_string" type_code="10">result</item>
                            <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                            <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Attributes">
                              <items count="2">
                                <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                                  <X>271</X>
                                  <Y>111</Y>
                                  <W>37</W>
                                  <H>20</H>
                                </item>
                                <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                                  <X>289.5</X>
                                  <Y>121</Y>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="8">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">11a2162d-dffe-4891-8396-cb1350d6b83b</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                    <item name="UserText" type_name="gh_string" type_code="10">(AddCircle (AddPoint 4 30 3) 5)
</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>20</X>
                          <Y>61</Y>
                          <W>160</W>
                          <H>100</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>20.52002</X>
                          <Y>61.34088</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">41e7b330-542c-41d4-b90d-bddac8d2d090</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">c3e73ae1-2032-4a81-8991-cabd8a492589</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>366</X>
                          <Y>39</Y>
                          <W>160</W>
                          <H>100</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>366.816</X>
                          <Y>39.84497</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="4">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">db0583cc-e47c-4e1e-b1f6-4e34b4807436</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10"></item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">f48286ee-ef18-4310-b637-412b074a4688</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="5">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>491</X>
                          <Y>170</Y>
                          <W>160</W>
                          <H>100</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>491.816</X>
                          <Y>170.3185</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="6">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="5">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">ac2bc2cb-70fb-4dd5-9c78-7e1ea97fe278</item>
                <item name="Name" type_name="gh_string" type_code="10">Geometry</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic geometry</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8c8f4521-ecf7-42dd-bee5-99c0f3f73d05</item>
                    <item name="Name" type_name="gh_string" type_code="10">Geometry</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Geo</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">f48286ee-ef18-4310-b637-412b074a4688</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>459</X>
                          <Y>262</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>484</X>
                          <Y>274</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="4971">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</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>